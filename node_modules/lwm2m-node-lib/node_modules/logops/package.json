{
  "_args": [
    [
      {
        "raw": "logops@https://registry.npmjs.org/logops/-/logops-0.5.0.tgz",
        "scope": null,
        "escapedName": "logops",
        "name": "logops",
        "rawSpec": "https://registry.npmjs.org/logops/-/logops-0.5.0.tgz",
        "spec": "https://registry.npmjs.org/logops/-/logops-0.5.0.tgz",
        "type": "remote"
      },
      "/Users/jollen/lks7688-iot-gateway/node_modules/lwm2m-node-lib"
    ]
  ],
  "_from": "https://registry.npmjs.org/logops/-/logops-0.5.0.tgz",
  "_id": "logops@0.5.0",
  "_inCache": true,
  "_location": "/lwm2m-node-lib/logops",
  "_phantomChildren": {},
  "_requested": {
    "raw": "logops@https://registry.npmjs.org/logops/-/logops-0.5.0.tgz",
    "scope": null,
    "escapedName": "logops",
    "name": "logops",
    "rawSpec": "https://registry.npmjs.org/logops/-/logops-0.5.0.tgz",
    "spec": "https://registry.npmjs.org/logops/-/logops-0.5.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/lwm2m-node-lib"
  ],
  "_resolved": "https://registry.npmjs.org/logops/-/logops-0.5.0.tgz",
  "_shasum": "ede3fcbc66d95c834116a7b524fe3bc5c2311e05",
  "_shrinkwrap": null,
  "_spec": "logops@https://registry.npmjs.org/logops/-/logops-0.5.0.tgz",
  "_where": "/Users/jollen/lks7688-iot-gateway/node_modules/lwm2m-node-lib",
  "author": {
    "name": "Javier Mendiara Cañardo",
    "email": "javier.mendiaracanardo@telefonica.com"
  },
  "bugs": {
    "url": "https://github.com/telefonicaid/logops/issues"
  },
  "contributors": [
    {
      "name": "Juan Antonio Hernando Labajo",
      "email": "juanantonio.hernandolabajo@telefonica.com"
    },
    {
      "name": "Guido García Bernardo",
      "email": "guido.garciabernardo@telefonica.com"
    },
    {
      "name": "Juan de Bravo Diez",
      "email": "juande.bravodiez@telefonica.com"
    }
  ],
  "dependencies": {
    "colors": "^1.1.2"
  },
  "description": "Simple and performant nodejs logger",
  "devDependencies": {
    "chai": "^3.0.0",
    "coveralls": "^2.11.2",
    "eslint": "^0.23.0",
    "istanbul": "^0.3.15",
    "jscs": "^1.13.1",
    "mocha": "^2.2.5",
    "sinon": "^1.15.0",
    "sinon-chai": "^2.8.0"
  },
  "engines": {
    "node": ">=0.10.8"
  },
  "homepage": "https://github.com/telefonicaid/logops",
  "keywords": [
    "logger",
    "simple",
    "performant"
  ],
  "license": "Apache-2.0",
  "main": "lib/logops",
  "name": "logops",
  "optionalDependencies": {},
  "readme": "# logops\n\nReally simple and performant logger for node.js projects.\n\n[![npm version](https://badge.fury.io/js/logops.svg)](http://badge.fury.io/js/logops)\n[![Build Status](https://travis-ci.org/telefonicaid/logops.svg)](https://travis-ci.org/telefonicaid/logops)\n[![Coverage Status](https://coveralls.io/repos/telefonicaid/logops/badge.svg?branch=develop)](https://coveralls.io/r/telefonicaid/logops?branch=develop)\n[![Dependency Status](https://gemnasium.com/telefonicaid/logops.svg)](https://gemnasium.com/telefonicaid/logops)\n\n## Installation\n\n```bash\nnpm install logops\n```\n\n## Basic usage\n\n```js\nvar logger = require('logops');\n\n//plain strings\nlogger.debug('This is an example');\n\n//util.format support\nlogger.info('Request %s %d %j', 'is', 5, {key: 'value'});\n\n//Multi string\nlogger.warn('Something went wrong:', value);\n\n//error to print stack traces\nlogger.error(new Error('Something went REALLY wrong'));\n\n//errors as parameter to print messages only\nlogger.fatal('SYSTEM UNSTABLE. BYE', error);\n```\n\n## Advanced usage\n\n### Context support\n\nLogops supports using a context holding information about a correlator (corr), transaction (trans) and operation (op).\nIf you pass a context object as a first argument, those fields are also logged as separate fields.\n\n```js\nvar logger = require('logops');\nvar context = {\n  corr: 'cbefb082-3429-4f5c-aafd-26b060d6a9fc',\n  trans: '110ec58a-a0f2-4ac4-8393-c866d813b8d1',\n  op: 'SendEMail'\n};\n\nlogger.debug(context, 'This is an example');\n```\n\nIf you are holding your context information in other places, like [Domains](http://nodejs.org/api/domain.html), you don't\nneed to pass a context to __every__ log function. Simply override the `logger.getContext` method to let the logger to get it.\n\n```js\nvar logger = require('logops');\n\nlogger.getContext = function getDomainContext() {\n  return require('domain').active.myContextObject;\n}\n\nlogger.debug('This is an example');\n```\n\n### Trace format\n\nThis library incorporates three flavors of trace formatting:\n* \"json\": writes logs as JSON.\n* \"pipe\": writes logs separating fields with pipes. This is the default value in logops\n* \"dev\": for development, used if the 'de-facto' NODE_ENV variable is set to 'development'\n\n```js\nlogger.format = logger.formatters.json;\nlogger.info('This is an example: %d', 5, {key:\"value\");\n//output: {\"time\":\"2015-06-11T08:36:16.628Z\",\"lvl\":\"INFO\",\"corr\":null,\"trans\":null,\"op\":null,\"msg\":\"This is an example: 5\", \"key: \"value\"}\n\nlogger.format = logger.formatters.pipe;\nlogger.info('This is an example: %d', 5, {key:\"value\");\n//output: time=2015-06-11T08:36:16.628Z | lvl=INFO | corr=n/a | trans=n/a | op=n/a | msg=This is an example: 5 { key: 'value' }\n\nlogger.format = logger.formatters.dev;\nlogger.info('This is an example: %d', 5, {key:\"value\"});\n//output: INFO This is an example: 5 { key: 'value' }\n```\n\nThe \"pipe\" formatter uses \"n/a\" as the default value when a context field (corr, trans, op) is not found.\nYou can change its value programmatically:\n\n```js\nlogger.formatters.setNotAvailable('NA');\nlogger.info('This is an example: %d', 5, {key:\"value\");\n//output: time=2015-06-11T08:36:16.628Z | lvl=INFO | corr=NA | trans=NA | op=NA | msg=This is an example: 5 { key: 'value' }\n```\n\nYou can also set the format specifying the formatter with `LOGOPS_FORMAT` environment variable:\n\n```bash\nexport LOGOPS_FORMAT=json\n```\n\n### Logger Level\n\nYou can set the logging level at any time. All the disabled logging methods are replaced by a noop,\nso there is not any performance penalty at production using an undesired level\n\n```js\nvar logger = require('logops');\n\n// {String} level one of the following values ['DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL']\nlogger.setLevel('DEBUG');\n```\n\nYou can also set the logging level using the `LOGOPS_LEVEL` environment variable:\n\n```bash\nexport LOGOPS_LEVEL=DEBUG\n```\n\n### Writing to files\n\nThis library writes by default to `process.stdout`, the safest, fastest and easy way to manage logs. It's how you execute your app when you define how to manage logs.\n\nThis approach is also compatible with [logrotate](http://linuxcommand.org/man_pages/logrotate8.html) as this is how many servers and PaaS manage the logs.\nTherefore you don't need to put __anything__ in your source code relative to logs, and all is done at execution time depending on the deployment.\n\n__Recommended execution:__ Pipelining the stdout to [tee](http://en.wikipedia.org/wiki/Tee_(command)).\nWith this configuration, you will not fail when the disk is full. It's also the best\nperformant solution\n\n\n```bash\n# write all traces to out.log\nnode index.js | tee -a out.log > /dev/null\n```\n\n```bash\n# write error and fatal traces to error.log and all traces to out.log (using json formatter)\nLOGOPS_FORMAT=json node index.js | tee >(grep -a -F -e '\"lvl\":\"ERROR\"' -e '\"lvl\":\"FATAL\"' > error.log) > out.log\n```\n\nYou can also write logs and fail miserably stopping your app when the disk is full by doing\n\n```bash\nnode index.js > out.log\n```\n\nPlease read carefully in the node documentation how the `stdout`/`stderr` stream behaves [regarding synchronous/asynchronous writing](https://nodejs.org/api/process.html#process_process_stdout)\n\n## Customization\n\n### Trace format\n\nYou can override the format function and manage by yourself the formatting taking into account your own environment variables by\noverriding the `logger.format` function\n\n```js\nvar logger = require('logops');\n/**\n * Return a String representation for a trace.\n * @param {String} level One of the following values\n *      ['DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL']\n * @param {Object} context Additional information to add to the trace\n * @param {String} message The main message to be added to the trace\n * @param {Array} args More arguments provided to the log function\n *\n * @return {String} The trace formatted\n */\nlogger.format = function myCustomFormat(level, context, message, args) {\n  var str = '';\n  //...\n  return str;\n};\n```\n\n### Output stream\n\nIf you want to pipe the output stream to any other stream in your source code, or even write to files *(not recommended)*,\nyou can override the stream used by this library\n\n```js\nvar logger = require('logops');\nlogger.stream = new MyOtherSuperStreamThatDoesGreatThingsExceptWriteToDisk();\n```\n\n## License\n\nCopyright 2014, 2015 [Telefonica Investigación y Desarrollo, S.A.U](http://www.tid.es)\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/telefonicaid/logops.git"
  },
  "scripts": {
    "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- -R dot test/environment.js test/*.spec.js",
    "lint": "jscs lib && eslint lib",
    "prepublish": "npm run test && npm run lint",
    "test": "mocha -R spec test/environment.js test/*.spec.js",
    "travis": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec test/environment.js test/*.spec.js && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "version": "0.5.0"
}
