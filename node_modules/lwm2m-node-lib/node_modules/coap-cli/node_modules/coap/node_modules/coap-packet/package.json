{
  "_args": [
    [
      {
        "raw": "coap-packet@https://registry.npmjs.org/coap-packet/-/coap-packet-0.1.13.tgz",
        "scope": null,
        "escapedName": "coap-packet",
        "name": "coap-packet",
        "rawSpec": "https://registry.npmjs.org/coap-packet/-/coap-packet-0.1.13.tgz",
        "spec": "https://registry.npmjs.org/coap-packet/-/coap-packet-0.1.13.tgz",
        "type": "remote"
      },
      "/Users/jollen/lks7688-iot-gateway/node_modules/lwm2m-node-lib"
    ]
  ],
  "_from": "https://registry.npmjs.org/coap-packet/-/coap-packet-0.1.13.tgz",
  "_id": "coap-packet@0.1.13",
  "_inCache": true,
  "_location": "/lwm2m-node-lib/coap-cli/coap/coap-packet",
  "_phantomChildren": {},
  "_requested": {
    "raw": "coap-packet@https://registry.npmjs.org/coap-packet/-/coap-packet-0.1.13.tgz",
    "scope": null,
    "escapedName": "coap-packet",
    "name": "coap-packet",
    "rawSpec": "https://registry.npmjs.org/coap-packet/-/coap-packet-0.1.13.tgz",
    "spec": "https://registry.npmjs.org/coap-packet/-/coap-packet-0.1.13.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/lwm2m-node-lib/coap-cli/coap"
  ],
  "_resolved": "https://registry.npmjs.org/coap-packet/-/coap-packet-0.1.13.tgz",
  "_shasum": "cdd9dae33e1f1cc488a0750370d80c56c9b98b0b",
  "_shrinkwrap": null,
  "_spec": "coap-packet@https://registry.npmjs.org/coap-packet/-/coap-packet-0.1.13.tgz",
  "_where": "/Users/jollen/lks7688-iot-gateway/node_modules/lwm2m-node-lib",
  "author": {
    "name": "Matteo Collina",
    "email": "hello@matteocollina.com"
  },
  "bugs": {
    "url": "https://github.com/mcollina/coap-packet/issues"
  },
  "dependencies": {},
  "description": "Generate and Parse CoAP packets",
  "devDependencies": {
    "chai": "~1.8.0",
    "mocha": "~1.13.0",
    "pre-commit": "0.0.3"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "homepage": "https://github.com/mcollina/coap-packet#readme",
  "keywords": [
    "coap",
    "m2m",
    "iot",
    "udp",
    "packet"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "coap-packet",
  "optionalDependencies": {},
  "pre-commit": [
    "test"
  ],
  "readme": "CoAP-Packet\n=====\n\n[![Build\nStatus](https://travis-ci.org/mcollina/coap-packet.png)](https://travis-ci.org/mcollina/coap-packet)\n\n__CoAP-Packet__ is a generator and parser of CoAP packets for node.js.\n\nWhat is CoAP?\n> Constrained Application Protocol (CoAP) is a software protocol\nintended to be used in very simple electronics devices that allows them\nto communicate interactively over the Internet. -  Wikipedia\n\nThis library follows the\n[draft-18](http://tools.ietf.org/html/draft-ietf-core-coap-18) of the standard.\n\nIt does not provide any CoAP semantics, it just parses the protocol.\n\n**CoAP-packet** is an **OPEN Open Source Project**, see the <a href=\"#contributing\">Contributing</a> section to find out what this means.\n\nThis has been tested only on node v0.10.\n\n## Installation\n\n```\n$: npm install coap-packet --save\n```\n\n## Basic Example\n\nThe following example opens an UDP client and UDP server and sends a\nCoAP message between them:\n\n```\nconst dgram       = require('dgram')\n    , packet      = require('coap-packet')\n    , parse       = packet.parse\n    , generate    = packet.generate\n    , payload     = new Buffer('Hello World')\n    , message     = generate({ payload: payload })\n    , port        = 41234\n    , client      = dgram.createSocket(\"udp4\")\n    , server      = dgram.createSocket(\"udp4\")\n\nserver.bind(port, function() {\n  client.send(message, 0, message.length, 41234, \"localhost\", function(err, bytes) {\n    client.close()\n  })\n})\n\nserver.on('message', function(data) {\n  console.log(parse(data).payload.toString())\n  server.close()\n})\n```\n\n## API\n\n  * <a href=\"#format\">JS packet format</a>\n  * <a href=\"#parse\"><code>coapPacket.<b>parse()</b></code></a>\n  * <a href=\"#generate\"><code>coapPacket.<b>generate()</b></code></a>\n\n<a name=\"parse\"></a>\n### parse(buffer)\n\nThe `parse` function takes a buffer and returns a JS object that\nfollows a particular <a href=\"#format\">format</a>.\n\n<a name=\"generate\"></a>\n### generate()\n\nThe `generate` function takes a JS object that\nfollows a particular <a href=\"#format\">format</a> and transform it into\na CoAP packet.\n\n<a name=\"format\"></a>\n### JS packet format\n\nThe JS representation of a CoAP packet is:\n```js\n{\n    token: new Buffer(4)\n  , code: '0.01'\n  , messageId: 42\n  , payload: new Buffer(200)\n  , options: [{\n        name: 'If-Match'\n      , value: new Buffer(5)\n    }, {\n        name: 'Uri-Path' \n      , value: new Buffer('hello')\n    }]\n}\n```\n\nInstead of numerical codes, it also supports humanized names, e.g.\n`GET`, `POST`, `PUT`, `DELETE`.\n\nNumerical codes can also be specified in HTTP format, like `500` or\n`'404'`.\n\n<a name=\"contributing\"></a>\n## Contributing\n\n__CoAP-Packet__ is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [CONTRIBUTING.md](https://github.com/mcollina/coap-packet/blob/master/CONTRIBUTING.md) file for more details.\n\n## Contributors\n\nCoap-Packet is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align=\"left\">Matteo Collina</th><td><a href=\"https://github.com/mcollina\">GitHub/mcollina</a></td><td><a href=\"https://twitter.com/matteocollina\">Twitter/@matteocollina</a></td></tr>\n</tbody></table>\n\n## LICENSE\n\nMIT, see LICENSE.md file.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mcollina/coap-packet.git"
  },
  "scripts": {
    "test": "mocha --bail --reporter spec --check-leaks"
  },
  "version": "0.1.13"
}
